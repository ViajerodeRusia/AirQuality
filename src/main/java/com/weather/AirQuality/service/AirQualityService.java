package com.weather.AirQuality.service;

import com.weather.AirQuality.http.AirQualityInterface;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Slf4j
@Service
public class AirQualityService {

    @Autowired
    private AirQualityInterface airQualityInterface;
    @Autowired
    private ApplicationContext applicationContext;

    public void sendAirQualityNow(long chatId) {
        try {
            ResponseEntity<String> response = airQualityInterface.getAirQualityData();
            String responseBody = response.getBody();

            if (responseBody != null) {
                JSONObject jsonResponse = new JSONObject(responseBody);
                log.info("Received air quality data: " + jsonResponse.toString());
                sendAirQualityUpdate(jsonResponse, chatId);
            }
        } catch (JSONException e) {
            log.error("Error parsing JSON response", e);
        }
    }

    private void sendAirQualityUpdate(JSONObject jsonResponse, long chatId) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            double pm25Value = extractPm25Value(jsonResponse);
            String cityName = extractCityName(jsonResponse);
            int aqiValue = extractAqiValue(jsonResponse);
            double temperature = extractTemperature(jsonResponse);
            double humidity = extractHumidity(jsonResponse);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            String message = String.format(
                    "üåç *–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞*\n" +
                            "–ì–æ—Ä–æ–¥: *%s*\n" +
                            "AQI (–ò–Ω–¥–µ–∫—Å –∫–∞—á–µ—Å—Ç–≤–∞ –≤–æ–∑–¥—É—Ö–∞): *%d*\n" +
                            "PM2.5: *%.1f ¬µg/m¬≥*\n" +
                            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *%.1f¬∞C*\n" +
                            "–í–ª–∞–∂–Ω–æ—Å—Ç—å: *%.1f%%*",
                    cityName, aqiValue, pm25Value, temperature, humidity
            );

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            log.info("Sending air quality update to Telegram: " + message);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram (–∑–¥–µ—Å—å –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –º–µ—Ç–æ–¥ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è)
            sendMessageToTelegram(chatId, message);

        } catch (Exception e) {
            log.error("Error parsing JSON response", e);
        }
    }
    private void sendMessageToTelegram(long chatId, String message) {
        TelegramBot telegramBot = applicationContext.getBean(TelegramBot.class);
        SendMessage telegramMessage = new SendMessage();
        telegramMessage.setChatId(String.valueOf(chatId));
        telegramMessage.setText(message);
        telegramMessage.enableMarkdown(true); // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
        try {
            telegramBot.execute(telegramMessage); // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private double extractPm25Value(JSONObject jsonResponse) throws JSONException {
        JSONObject data = jsonResponse.getJSONObject("data");
        JSONObject iaqi = data.getJSONObject("iaqi");
        JSONObject pm25 = iaqi.getJSONObject("pm25");

        Object value = pm25.get("v");
        if (value instanceof Number) {
            return ((Number) value).doubleValue();
        } else if (value instanceof String) {
            return Double.parseDouble((String) value);
        } else {
            throw new JSONException("Unexpected value type for pm25: " + value.getClass().getName());
        }
    }
    private String extractCityName(JSONObject jsonResponse) throws JSONException {
        return jsonResponse.getJSONObject("data").getJSONObject("city").getString("name");
    }

    private int extractAqiValue(JSONObject jsonResponse) throws JSONException {
        return jsonResponse.getJSONObject("data").getInt("aqi");
    }

    private double extractTemperature(JSONObject jsonResponse) throws JSONException {
        JSONObject iaqi = jsonResponse.getJSONObject("data").getJSONObject("iaqi");
        return iaqi.getJSONObject("t").getDouble("v");
    }

    private double extractHumidity(JSONObject jsonResponse) throws JSONException {
        JSONObject iaqi = jsonResponse.getJSONObject("data").getJSONObject("iaqi");
        return iaqi.getJSONObject("h").getDouble("v");
    }
}