package com.weather.AirQuality.service;

import com.weather.AirQuality.http.AirQualityInterface;
import lombok.extern.slf4j.Slf4j;
import org.json.JSONException;
import org.json.JSONObject;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.ApplicationContext;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Service;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.exceptions.TelegramApiException;

@Slf4j
@Service
public class AirQualityService {

    @Autowired
    private AirQualityInterface airQualityInterface;
    @Autowired
    private ApplicationContext applicationContext;

    public void sendAirQualityNow(long chatId, String city) {
        try {
            city = city.toLowerCase(); // –ü—Ä–∏–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
            ResponseEntity<String> response = airQualityInterface.getAirQualityData(city);
            String responseBody = response.getBody();

            if (responseBody != null) {
                log.info("API Response for city " + city + ": " + responseBody);
                JSONObject jsonResponse = new JSONObject(responseBody);
                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞
                String status = jsonResponse.optString("status", "error");
                if ("ok".equals(status)) {
                    sendAirQualityUpdate(jsonResponse, chatId);
                } else {
                    String errorMessage = jsonResponse.optString("data", "Unknown error");
                    sendMessageToTelegram(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö: " + errorMessage);
                }
            } else {
                sendMessageToTelegram(chatId, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
            }
        } catch (JSONException e) {
            log.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            sendMessageToTelegram(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API: " + e.getMessage());
            sendMessageToTelegram(chatId, "–ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–ø–∏—Å–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }

    private void sendAirQualityUpdate(JSONObject jsonResponse, long chatId) {
        try {
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            double pm25Value = extractPm25Value(jsonResponse);
            String cityName = extractCityName(jsonResponse);
            double temperature = extractTemperature(jsonResponse);
            double humidity = extractHumidity(jsonResponse);

            // –ü–æ–ª—É—á–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ PM2.5
            String pm25Recommendation = getPm25Recommendation(pm25Value);

            // –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è Telegram
            String message = String.format(
                    "üåç *–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞*\n" +
                            "–ì–æ—Ä–æ–¥: *%s*\n" +
                            "PM2.5: *%.1f ¬µg/m¬≥*\n" +
                            "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: *%.1f¬∞C*\n" +
                            "–í–ª–∞–∂–Ω–æ—Å—Ç—å: *%.1f%%*\n" +
                            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: *%s*\n",
                    cityName, pm25Value, temperature, humidity, pm25Recommendation
            );

            // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            log.info("Sending air quality update to Telegram: " + message);

            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram
            sendMessageToTelegram(chatId, message);

        } catch (Exception e) {
            log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö: " + e.getMessage());
            sendMessageToTelegram(chatId, "–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
        }
    }
    private String getPm25Recommendation(double pm25Value) {
        if (pm25Value <= 15.0) {
            return "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –æ—Ç–ª–∏—á–Ω–æ–µ. –ú–æ–∂–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü—É –∏ –∑–∞–Ω–∏–º–∞—Ç—å—Å—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º–∏ –Ω–∞ —Å–≤–µ–∂–µ–º –≤–æ–∑–¥—É—Ö–µ!";
        } else if (pm25Value <= 40.0) {
            return "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ —É–º–µ—Ä–µ–Ω–Ω–æ–µ. –ú–æ–∂–Ω–æ –≤—ã—Ö–æ–¥–∏—Ç—å –Ω–∞ —É–ª–∏—Ü—É, –Ω–æ —Å–ª–µ–¥–∏—Ç–µ –∑–∞ —Å–∞–º–æ—á—É–≤—Å—Ç–≤–∏–µ–º, –µ—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Ä–µ—Å–ø–∏—Ä–∞—Ç–æ—Ä–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã.";
        } else if (pm25Value <= 65.0) {
            return "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–µ –¥–ª—è —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –≥—Ä—É–ø–ø. –õ—é–¥—è–º —Å –∞—Å—Ç–º–æ–π –∏ –¥—Ä—É–≥–∏–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏ –¥—ã—Ö–∞—Ç–µ–ª—å–Ω—ã—Ö –ø—É—Ç–µ–π —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏–∑–±–µ–≥–∞—Ç—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–µ–π –Ω–∞ —É–ª–∏—Ü–µ.";
        } else if (pm25Value <= 150.0) {
            return "–ö–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞ –Ω–µ–∑–¥–æ—Ä–æ–≤–æ–µ. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –æ–≥—Ä–∞–Ω–∏—á–∏—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è –Ω–∞ —É–ª–∏—Ü–µ, –æ—Å–æ–±–µ–Ω–Ω–æ –ª—é–¥—è–º —Å —Ö—Ä–æ–Ω–∏—á–µ—Å–∫–∏–º–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è–º–∏.";
        } else if (pm25Value <= 250.0) {
            return "–û—á–µ–Ω—å –ø–ª–æ—Ö–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞. –ü–æ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –æ—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –≤ –ø–æ–º–µ—â–µ–Ω–∏–∏. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –Ω–∞–¥–µ–≤–∞—Ç—å –º–∞—Å–∫—É, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –≤—ã–π—Ç–∏ –Ω–∞ —É–ª–∏—Ü—É.";
        } else if (pm25Value <= 350.0) {
            return "–û–ø–∞—Å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞. –ù–µ –≤—ã—Ö–æ–¥–∏—Ç–µ –Ω–∞ —É–ª–∏—Ü—É –±–µ–∑ –∫—Ä–∞–π–Ω–µ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞—â–∏—Ç—ã.";
        } else {
            return "–ß—Ä–µ–∑–≤—ã—á–∞–π–Ω–æ –æ–ø–∞—Å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤–æ–∑–¥—É—Ö–∞! –û—Å—Ç–∞–≤–∞–π—Ç–µ—Å—å –¥–æ–º–∞ –∏ –∏–∑–±–µ–≥–∞–π—Ç–µ –ø—Ä–µ–±—ã–≤–∞–Ω–∏—è –Ω–∞ —É–ª–∏—Ü–µ.";
        }
    }
    private void sendMessageToTelegram(long chatId, String message) {
        TelegramBot telegramBot = applicationContext.getBean(TelegramBot.class);
        SendMessage telegramMessage = new SendMessage();
        telegramMessage.setChatId(String.valueOf(chatId));
        telegramMessage.setText(message);
        telegramMessage.enableMarkdown(true); // –ï—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—à—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Markdown
        try {
            telegramBot.execute(telegramMessage); // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
        } catch (TelegramApiException e) {
            throw new RuntimeException(e);
        }
    }

    private double extractPm25Value(JSONObject jsonResponse) throws JSONException {
        JSONObject data = jsonResponse.getJSONObject("data");
        JSONObject iaqi = data.optJSONObject("iaqi");

        if (iaqi != null && iaqi.has("pm25")) {
            JSONObject pm25 = iaqi.getJSONObject("pm25");
            Object value = pm25.opt("v");

            if (value instanceof Number) {
                return ((Number) value).doubleValue();
            } else if (value instanceof String) {
                try {
                    return Double.parseDouble((String) value);
                } catch (NumberFormatException e) {
                    throw new JSONException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∑–Ω–∞—á–µ–Ω–∏—è PM2.5: " + value);
                }
            } else {
                throw new JSONException("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π —Ç–∏–ø –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è PM2.5: " + value.getClass().getName());
            }
        } else {
            throw new JSONException("–î–∞–Ω–Ω—ã–µ –æ PM2.5 –Ω–µ –Ω–∞–π–¥–µ–Ω—ã");
        }
    }
    private String extractCityName(JSONObject jsonResponse) throws JSONException {
        return jsonResponse.getJSONObject("data").getJSONObject("city").getString("name");
    }

    private double extractTemperature(JSONObject jsonResponse) throws JSONException {
        JSONObject iaqi = jsonResponse.getJSONObject("data").getJSONObject("iaqi");
        return iaqi.getJSONObject("t").getDouble("v");
    }

    private double extractHumidity(JSONObject jsonResponse) throws JSONException {
        JSONObject iaqi = jsonResponse.getJSONObject("data").getJSONObject("iaqi");
        return iaqi.getJSONObject("h").getDouble("v");
    }
}